#
# Copyright (c) 2019-2022 cnbbx <https://cnbbx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Build OpenWrt
run-name: 我的OpenWrt云编译：${{ github.actor }} requested a workflow
env:
  REPO_URL: https://github.com/cnbbx/Openwrt-src.git
  REPO_BRANCH: openwrt-22.03
  FEEDS_CONF: feeds.conf.default
  BUILD_USER: ${{ github.actor }}
  TZ: Asia/Shanghai

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      UPLOAD_BIN_DIR:
        description: '保存OpenWrt的bin全部文件到Artifacts'
        type: boolean
        default: true
      UPLOAD_FIRMWARE:
        description: '保存Firmware固件到Artifacts'
        type: boolean
        default: true
      UPLOAD_COWTRANSFER:
        description: '发布Firmware固件到Cowtransfer'
        type: boolean
        default: false
      UPLOAD_WETRANSFER:
        description: '发布Firmware固件到Wetransfer'
        type: boolean
        default: true
      UPLOAD_RELEASE:
        description: '发布Firmware固件到Releases'
        type: boolean
        default: true
  schedule:
    - cron: '5 22 * * 0'

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - FIRMWARE_NAME: youku_yk-l2
          - FIRMWARE_NAME: newifi3_d2
    steps:
    - name: 检出主分支
      uses: actions/checkout@main

    - name: 检查空间使用情况
      run: |
        echo "警告⚠"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install libfuse-dev build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆软路由源代码
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载自定义订阅项目
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default

    - name: 下载自定义项目的清单
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装自定义项目的清单
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义固件配置
      if: (!cancelled())
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e ${{ matrix.FIRMWARE_NAME }}.config ] && mv ${{ matrix.FIRMWARE_NAME }}.config openwrt/.config
        chmod +x ${{ matrix.FIRMWARE_NAME }}.sh && ./${{ matrix.FIRMWARE_NAME }}.sh

    - name: 下载自定义固件插件
      id: package
      if: (!cancelled())
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      if: (!cancelled())
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s || true
        echo "--------------------------"
        tree bin
        echo "--------------------------"
        mkdir -p ipkPackages
        mv -f bin/packages/*/*/*.ipk ipkPackages
        mv -f bin/targets/*/*/packages/*.ipk ipkPackages
        echo "--------------------------"
        tree bin
        echo "--------------------------"
        tree ipkPackages
        echo "--------------------------"

    - name: 保存编译后的插件文件
      uses: actions/upload-artifact@main
      if: inputs.UPLOAD_BIN_DIR == true
      with:
        name: OpenWrt_ipkPackages
        path: openwrt/ipkPackages

    - name: 保存编译后的固件文件
      uses: actions/upload-artifact@main
      if: inputs.UPLOAD_BIN_DIR == true
      with:
        name: OpenWrt_firmware
        path: openwrt/bin

  deploy:
    needs: build
    runs-on: ubuntu-20.04
    steps:
    - name: 调取编译后的插件文件
      uses: actions/download-artifact@main
      with:
        name: OpenWrt_ipkPackages
        path: openwrt/ipkPackages

    - name: 调取编译后的固件文件
      uses: actions/download-artifact@main
      with:
        name: OpenWrt_firmware
        path: openwrt/bin
        
    - name: 优化需要发布的固件
      id: organize
      if: inputs.UPLOAD_FIRMWARE == true && !cancelled()
      run: |
        cd openwrt
        tar -zcvf bin/Packages.tar.gz ipkPackages
        cd bin/targets/*/*
        rm -rf packages
        rm -rf *initramfs*
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: 发布固件到Cowtransfer
      id: cowtransfer
      if: inputs.UPLOAD_FIRMWARE == true && inputs.UPLOAD_COWTRANSFER == true && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: 发布固件到WeTransfer
      id: wetransfer
      if: inputs.UPLOAD_FIRMWARE == true && inputs.UPLOAD_WETRANSFER == true && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: 生成 release tag
      id: tag
      if: inputs.UPLOAD_RELEASE == true && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "1、本固件为自动编译" >> release.txt
        echo "2、发行版中只提供完整的固件" >> release.txt
        echo "3、源码：${{ env.REPO_URL }}" >> release.txt
        echo "-- Build by ${{ env.BUILD_USER }} @ with Github Action on $(date +"%Y.%m.%d-%H%M")" >> release.txt
        echo "🚀 Auto build | 自动编译" >> release.txt
        [ ${{ inputs.UPLOAD_COWTRANSFER }} = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ ${{ inputs.UPLOAD_WETRANSFER }} = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt

    - name: 上传固件到release
      uses: softprops/action-gh-release@v1
      if: inputs.UPLOAD_RELEASE == true && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 移除老的 workflow runs
      uses: zhoujinshi/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 移除老的 Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: inputs.UPLOAD_RELEASE == true && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
